{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "backuplogicapp_name": {
            "defaultValue": "fwpolicybackup-logicapp",
            "type": "String"
        },
        "restorelogicapp_name": {
            "defaultValue": "fwpolicyrestore-logicapp",
            "type": "String"
        },
        "fwpolicyid": {            
            "defaultValue": "Insert the resourceid of the firewall policy object",
            "type": "String"
        },
        "storageAccount_name": {
            "defaultValue": "lgappstorage11223344",
            "type": "String"
        }
    },
    "variables": {         
        "connections_azureblob_name": "azureblob"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "name": "[parameters('storageAccount_name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connections_azureblob_name')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "toblob",
                "authenticatedUser": {},
                "statuses": [
                    {
                        "status": "Ready"
                    }
                ],
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                    },
                "customParameterValues": {},
                "createdTime": "2023-11-01T14:37:09.1628205Z",
                "changedTime": "2023-11-01T14:37:09.1628205Z",
                "api": {
                    "name": "[variables('connections_azureblob_name')]",
                    "displayName": "Azure Blob Storage",
                    "description": "Microsoft Azure Storage provides a massively scalable, durable, and highly available storage for data on the cloud, and serves as the data storage solution for modern applications. Connect to Blob Storage to perform various operations such as create, update, get and delete on blobs in your Azure Storage account.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1664/1.0.1664.3477/', variables('connections_azureblob_name'), '/icon.png')]",
                    "brandColor": "#804998",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]",
                    "type": "Microsoft.Web/locations/managedApis"
                }
                
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('backuplogicapp_name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "acctname":{
                           "defaultValue": {},
                            "type": "String" 
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Day",
                                "interval": 3
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Day",
                                "interval": 3
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Compose_-_get_length_of_template": {
                            "runAfter": {
                                "Initialize_variable_-_firewallBackupContent": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@length(variables('firewallBackupContent'))"
                        },
                        "Compose_-_template_in_string_format": {
                            "runAfter": {
                                "Initialize_variable_-_store_integer_length_of_needed_parts_from_template": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('firewallBackupContent')"
                        },
                        "For_each": {
                            "foreach": "@body('Parse_JSON')?['resources']",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Create_blob_(V2)": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@{variables('newfw1')}@{variables('pol1')},@{item()}]}",
                                                "headers": {
                                                    "ReadFileMetadataFromServer": true
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('acctname')))}/files",
                                                "queries": {
                                                    "folderPath": "/backups",
                                                    "name": "test-@{replace(item()['name'],'/','-')}",
                                                    "queryParametersSingleEncoded": true
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "or": [
                                            {
                                                "contains": [
                                                    "@item()['type']",
                                                    "ruleCollectionGroups"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "HTTP_-_export_template": {
                            "runAfter": {},
                            "type": "Http",
                            "inputs": {
                                "authentication": {
                                    "type": "ManagedServiceIdentity"
                                },
                                "body": {
                                    "options": "SkipResourceNameParameterization",
                                    "resources": [
                                        //"/subscriptions/@{variables('subscriptionID')}/resourceGroups/@{variables('resourceGroupName')}/providers/Microsoft.Network/firewallPolicies/@{variables('firewallPolicyName')}"
                                        "[parameters('fwpolicyid')]"  
                                    ]
                                },
                                "method": "POST",
                                "uri": "[concat('https://management.azure.com/subscriptions/',subscription().subscriptionId,'/resourcegroups/',resourceGroup().name,'/exportTemplate?api-version=2021-04-01')]"
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Set_variable_-_firewallBackupContent_with_correct_format": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "newfw1",
                                        "type": "string",
                                        "value": "@variables('firewallBackupContent')"
                                    }
                                ]
                            }
                        },                        
                        "Initialize_variable_-_firewallBackupContent": {
                            "runAfter": {
                                "HTTP_-_export_template": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "firewallBackupContent",
                                        "type": "string",
                                        "value": "@{body('HTTP_-_export_template')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_store_integer_length_of_needed_parts_from_template": {
                            "runAfter": {
                                "Compose_-_get_length_of_template": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "length",
                                        "type": "integer",
                                        "value": "@sub(outputs('Compose_-_get_length_of_template'),13)"
                                    }
                                ]
                            }
                        },                        
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "pol1",
                                        "type": "object",
                                        "value": "@body('Parse_JSON')['resources'][0]"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Set_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@variables('firewallBackupContent')",
                                "schema": {
                                    "properties": {
                                        "$schema": {
                                            "type": "string"
                                        },
                                        "contentVersion": {
                                            "type": "string"
                                        },
                                        "parameters": {
                                            "properties": {},
                                            "type": "object"
                                        },
                                        "resources": {
                                            "items": {
                                                "properties": {
                                                    "apiVersion": {
                                                        "type": "string"
                                                    },
                                                    "dependsOn": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "location": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "properties": {
                                                        "properties": {
                                                            "intrusionDetection": {
                                                                "properties": {
                                                                    "mode": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "sku": {
                                                                "properties": {
                                                                    "tier": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "threatIntelMode": {
                                                                "type": "string"
                                                            },
                                                            "threatIntelWhitelist": {
                                                                "properties": {
                                                                    "fqdns": {
                                                                        "type": "array"
                                                                    },
                                                                    "ipAddresses": {
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "apiVersion",
                                                    "name",
                                                    "location",
                                                    "properties"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "variables": {
                                            "properties": {},
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Set_variable": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "newfw1",
                                "value": "@{slice(variables('firewallBackupContent'),0,164)}"
                            }
                        },
                        "Set_variable_-_firewallBackupContent_with_correct_format": {
                            "runAfter": {
                                "Compose_-_template_in_string_format": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "firewallBackupContent",
                                "value": "@{substring(outputs('Compose_-_template_in_string_format'),12,variables('length'))}"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                                "connectionName": "azureblob",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            }
                        }
                    },
                    "acctname": {
                        "value": "[parameters('storageAccount_name')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('restorelogicapp_name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "acctname":{
                           "defaultValue": {},
                            "type": "String" 
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "rg": ""
                                }
                            }
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@body('Lists_blobs_(V2)')?['value']",
                            "actions": {
                                "Delay": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Wait",
                                    "inputs": {
                                        "interval": {
                                            "count": 1,
                                            "unit": "Minute"
                                        }
                                    }
                                },
                                "Get_blob_content_(V2)": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('acctname')))}/files/@{encodeURIComponent(encodeURIComponent('/backups/',items('For_each')?['Name']))}/content",
                                        "queries": {
                                            "inferContentType": true
                                        }
                                    }
                                },
                                "HTTP": {
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "properties": {
                                                "mode": "Incremental",
                                                "template": "@json(body('Get_blob_content_(V2)'))"
                                            }
                                        },
                                        "method": "PUT",
                                        "uri": "[concat('https://management.azure.com/subscriptions/',subscription().subscriptionId,'/resourcegroups/@{variables(''var2'')}/providers/Microsoft.Resources/deployments/deploy1-@{items(''For_each'')?[''DisplayName'']}?api-version=2020-10-01')]"
                                    }
                                },
                                "Set_variable": {
                                    "runAfter": {
                                        "Get_blob_content_(V2)": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "var1",
                                        "value": "@json(body('Get_blob_content_(V2)'))"
                                    }
                                }
                            },
                            "runAfter": {
                                "Lists_blobs_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "var1",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "var2",
                                        "type": "string",
                                        "value": "@{triggerBody()['rg']}"
                                    }
                                ]
                            }
                        },
                        "Lists_blobs_(V2)": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "metadata": {
                                "JTJmYmFja3Vwcw==": "/backups"
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('acctname')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('JTJmYmFja3Vwcw=='))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                               "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                                "connectionName": "azureblob",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            }
                        }
                    },
                    "acctname": {
                        "value": "[parameters('storageAccount_name')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccount_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "allowPermanentDelete": false,
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccount_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "protocolSettings": {
                    "smb": {}
                },
                "cors": {
                    "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccount_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccount_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccount_name'), '/default/backups')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccount_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccount_name'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(concat(resourceGroup().id,'contrib1'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('backuplogicapp_name')), '2019-05-01','full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(concat(resourceGroup().id,'contrib2'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('restorelogicapp_name')), '2019-05-01','full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(concat(resourceGroup().id,'blobcontrib11'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('backuplogicapp_name')), '2019-05-01','full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(concat(resourceGroup().id,'blobcontrib22'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('restorelogicapp_name')), '2019-05-01','full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        }
    ]
}